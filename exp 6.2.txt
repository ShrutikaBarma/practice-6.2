// =======================================================
// Secure Authentication using JWT in Express.js + MongoDB
// =======================================================

const express = require("express");
const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

const app = express();
app.use(express.json());

// -----------------------------------------------
// ?? MongoDB Connection
// -----------------------------------------------
mongoose.connect("mongodb+srv://<username>:<password>@<cluster>.mongodb.net/jwtBankDB", {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log("? MongoDB Connected Successfully"))
.catch(err => console.error("? Database Connection Failed:", err));

// -----------------------------------------------
// ?? User Schema & Model
// -----------------------------------------------
const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  balance: { type: Number, default: 1000 } // Example banking field
});

const User = mongoose.model("User", userSchema);

// -----------------------------------------------
// ?? JWT Secret Key
// -----------------------------------------------
const SECRET_KEY = "supersecretkey123"; // (In real apps, store securely in .env)

// -----------------------------------------------
// ?? Middleware: Verify JWT Token
// -----------------------------------------------
function verifyToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  if (!authHeader) return res.status(401).json({ message: "Authorization header missing" });

  const token = authHeader.split(" ")[1];
  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(403).json({ message: "Invalid or expired token" });
    req.user = decoded; // attach user info to request
    next();
  });
}

// -----------------------------------------------
// ?? Route: Register User
// -----------------------------------------------
app.post("/register", async (req, res) => {
  try {
    const { username, password } = req.body;

    // Hash the password
    const hashedPassword = await bcrypt.hash(password, 10);

    // Create user
    const newUser = new User({ username, password: hashedPassword });
    await newUser.save();

    res.status(201).json({ message: "User registered successfully" });
  } catch (err) {
    res.status(400).json({ message: "Registration failed", error: err.message });
  }
});

// -----------------------------------------------
// ?? Route: Login User
// -----------------------------------------------
app.post("/login", async (req, res) => {
  try {
    const { username, password } = req.body;

    // Find user
    const user = await User.findOne({ username });
    if (!user) return res.status(404).json({ message: "User not found" });

    // Validate password
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(401).json({ message: "Invalid credentials" });

    // Generate JWT Token
    const token = jwt.sign({ id: user._id, username: user.username }, SECRET_KEY, { expiresIn: "1h" });

    res.json({ message: "Login successful", token });
  } catch (err) {
    res.status(500).json({ message: "Login failed", error: err.message });
  }
});

// -----------------------------------------------
// ?? Protected Route: Banking Operation
// -----------------------------------------------
app.get("/bank/balance", verifyToken, async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    res.json({ username: user.username, balance: user.balance });
  } catch (err) {
    res.status(500).json({ message: "Error fetching balance" });
  }
});

// -----------------------------------------------
// ?? Protected Route: Deposit Money
// -----------------------------------------------
app.post("/bank/deposit", verifyToken, async (req, res) => {
  const { amount } = req.body;
  if (!amount || amount <= 0) return res.status(400).json({ message: "Invalid amount" });

  try {
    const user = await User.findById(req.user.id);
    user.balance += amount;
    await user.save();
    res.json({ message: "Deposit successful", newBalance: user.balance });
  } catch (err) {
    res.status(500).json({ message: "Error processing deposit" });
  }
});

// -----------------------------------------------
// ?? Protected Route: Withdraw Money
// -----------------------------------------------
app.post("/bank/withdraw", verifyToken, async (req, res) => {
  const { amount } = req.body;
  if (!amount || amount <= 0) return res.status(400).json({ message: "Invalid amount" });

  try {
    const user = await User.findById(req.user.id);
    if (user.balance < amount) return res.status(400).json({ message: "Insufficient balance" });

    user.balance -= amount;
    await user.save();
    res.json({ message: "Withdrawal successful", newBalance: user.balance });
  } catch (err) {
    res.status(500).json({ message: "Error processing withdrawal" });
  }
});

// -----------------------------------------------
// ??? Start Server
// -----------------------------------------------
const PORT = 3000;
app.listen(PORT, () => console.log(`?? Server running on port ${PORT}`));
